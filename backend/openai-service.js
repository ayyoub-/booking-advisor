import OpenAI from 'openai';

class OpenAIService {
  constructor() {
    this.client = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || 'your-openai-api-key-here'
    });
  }

  async analyzeHotels(hotels, userCriteria = {}) {
    try {
      console.log('üîç Preparing hotel data for AI analysis...');
      
      // Pr√©parer les donn√©es des h√¥tels pour OpenAI
      const hotelsData = hotels.map((hotel, index) => ({
        name: hotel.name,
        location: hotel.location || 'Unknown',
        rating: hotel.rating,
        totalReviews: hotel.totalReviews,
        reviews: hotel.scrapedReviews || [],
        keyInsights: hotel.keyInsights || []
      }));

      console.log('üìä Hotel data prepared:', hotelsData.map(h => h.name));
      if (Object.keys(userCriteria).length > 0) {
        console.log('üéØ User criteria:', userCriteria);
      }

      // Cr√©er le prompt pour OpenAI avec les crit√®res utilisateur
      const prompt = this.createAnalysisPrompt(hotelsData, userCriteria);

      console.log('ü§ñ Sending request to OpenAI...');

      const completion = await this.client.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "Tu es un expert conseiller en voyage et h√©bergement avec plus de 15 ans d'exp√©rience. Tu analyses les commentaires d'h√¥tels pour donner des recommandations personnalis√©es et professionnelles. Tu te bases PRINCIPALEMENT sur l'analyse des commentaires r√©els des clients pour identifier leurs v√©ritables exp√©riences, sentiments et besoins. Tu prends en compte la qualit√© du service, la propret√©, l'emplacement, le rapport qualit√©-prix, et les besoins sp√©cifiques des voyageurs selon leurs propres t√©moignages."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.7
      });

      console.log('üìù OpenAI response received');

      const response = completion.choices[0].message.content;
      
      // Parser la r√©ponse pour extraire la recommandation
      const result = this.parseOpenAIResponse(response, hotelsData);
      
      console.log('‚úÖ AI analysis completed successfully');
      return result;

    } catch (error) {
      console.error('OpenAI API Error:', error);
      throw new Error(`OpenAI analysis failed: ${error.message}`);
    }
  }

  createAnalysisPrompt(hotelsData, userCriteria = {}) {
    let prompt = `Je compare ${hotelsData.length} h√¥tels pour un voyage. Voici les donn√©es de chaque h√¥tel bas√©es sur des commentaires r√©els de Booking.com :

`;

    hotelsData.forEach((hotel, index) => {
      prompt += `H√îTEL ${index + 1}: ${hotel.name}
üìç Localisation: ${hotel.location}
‚≠ê Note moyenne: ${hotel.rating.toFixed(1)}/5
üìä Nombre de commentaires: ${hotel.totalReviews}
üîç Insights cl√©s: ${hotel.keyInsights.join(', ')}

Commentaires r√©cents (√©chantillon):
`;

      // Ajouter quelques commentaires repr√©sentatifs
      const sampleReviews = hotel.reviews.slice(0, 8);
      sampleReviews.forEach(review => {
        prompt += `- ${review.score}/5: "${review.review}" (${review.date})\n`;
      });

      prompt += `\n---\n\n`;
    });

    // Ajouter les crit√®res utilisateur si fournis
    if (Object.keys(userCriteria).length > 0) {
      prompt += `CRIT√àRES DE S√âLECTION UTILISATEUR:
`;
      if (userCriteria.proximity) prompt += `- Proximit√© des attractions/transports: ${userCriteria.proximity}\n`;
      if (userCriteria.comfort) prompt += `- Niveau de confort recherch√©: ${userCriteria.comfort}\n`;
      if (userCriteria.ambiance) prompt += `- Ambiance souhait√©e: ${userCriteria.ambiance}\n`;
      if (userCriteria.activities) prompt += `- Activit√©s pr√©f√©r√©es: ${userCriteria.activities}\n`;
      if (userCriteria.travelType) prompt += `- Type de voyage: ${userCriteria.travelType}\n`;
      prompt += `\n`;
    }

    prompt += `En tant qu'expert conseiller en voyage avec 15 ans d'exp√©rience, analyse ces h√¥tels en te basant PRINCIPALEMENT sur les commentaires r√©els des clients. 

ANALYSE REQUISE:
1. **Analyse sentimentale des commentaires**: Identifie les √©motions, sentiments et exp√©riences v√©cues par les clients
2. **Mots-cl√©s r√©currents**: Note les termes qui reviennent souvent dans les commentaires (propret√©, service, emplacement, etc.)
3. **Probl√®mes r√©currents**: Identifie les points n√©gatifs mentionn√©s par plusieurs clients
4. **Points forts authentiques**: Les aspects que les clients appr√©cient vraiment selon leurs propres mots
5. **Coh√©rence des exp√©riences**: V√©rifie si les commentaires sont coh√©rents entre eux

R√©ponds au format JSON suivant :

{
  "recommendation": "Recommandation d√©taill√©e bas√©e sur l'analyse des commentaires r√©els, expliquant pourquoi cet h√¥tel correspond le mieux aux attentes",
  "topChoice": 1,
  "analysis": {
    "strengths": ["Point fort identifi√© dans les commentaires", "Autre point fort mentionn√© par les clients"],
    "considerations": ["Point d'attention mentionn√© par les clients", "Aspect √† consid√©rer selon les commentaires"],
    "bestFor": "Type de voyageur id√©al bas√© sur les commentaires et exp√©riences partag√©es",
    "sentimentAnalysis": "Analyse du sentiment g√©n√©ral des commentaires (tr√®s positif, positif, mitig√©, etc.)",
    "keyWords": ["Mots-cl√©s r√©currents dans les commentaires", "Termes souvent mentionn√©s"],
    "recentTrends": "Tendances observ√©es dans les commentaires r√©cents"
  },
  "comparison": {
    "hotel1": "Analyse bas√©e sur les commentaires de l'h√¥tel 1",
    "hotel2": "Analyse bas√©e sur les commentaires de l'h√¥tel 2", 
    "hotel3": "Analyse bas√©e sur les commentaires de l'h√¥tel 3"
  }
}

Remplace "topChoice" par le num√©ro de l'h√¥tel recommand√© (1, 2, ou 3).`;

    return prompt;
  }

  parseOpenAIResponse(response, hotelsData) {
    try {
      // Essayer de parser le JSON de la r√©ponse
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          success: true,
          recommendation: parsed.recommendation || "Recommandation bas√©e sur l'analyse des commentaires",
          topChoice: (parsed.topChoice || 1) - 1, // Convertir en index 0-based
          analysis: parsed.analysis || {},
          comparison: parsed.comparison || {},
          rawResponse: response
        };
      } else {
        // Fallback si le JSON n'est pas trouv√©
        return {
          success: true,
          recommendation: response,
          topChoice: 0,
          analysis: {},
          comparison: {},
          rawResponse: response
        };
      }
    } catch (error) {
      console.error('Error parsing OpenAI response:', error);
      return {
        success: false,
        recommendation: "Analyse OpenAI disponible mais format de r√©ponse inattendu",
        topChoice: 0,
        analysis: {},
        comparison: {},
        rawResponse: response,
        error: error.message
      };
    }
  }

  isConfigured() {
    return process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'your-openai-api-key-here';
  }
}

export default OpenAIService;
